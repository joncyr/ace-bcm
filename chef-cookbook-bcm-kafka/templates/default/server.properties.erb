# Automatically Generated by Chef -- Do Not Modify

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=<%= @c['broker.id'] %>

############################# Socket Server Settings #############################

# The port the socket server listens on
port=<%= @c['port'] %>

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
#host.name=localhost

# Hostname the broker will advertise to producers and consumers. If not set, it uses the
# value for "host.name" if configured.  Otherwise, it will use the value returned from
# java.net.InetAddress.getCanonicalHostName().
#advertised.host.name=<hostname routable by clients>

# The port to publish to ZooKeeper for clients to use. If this is not set,
# it will publish the same port that the broker binds to.
#advertised.port=<port accessible by clients>

# The number of threads handling network requests
num.network.threads=<%= @c['num.network.threads'] %>

# The number of threads doing disk I/O
num.io.threads=<%= @c['num.io.threads'] %>

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=<%= @c['socket.send.buffer.bytes'] %>

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=<%= @c['socket.receive.buffer.bytes'] %>

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=<%= @c['socket.request.max.bytes'] %>

############################# Topic Settings #############################

# Allow deletion of topics (true/false)
delete.topic.enable=<%= @c['delete.topic.enable'] %>

############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs=<%= @c['log.dirs'].join(',') %>

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=<%= @c['num.partitions'] %>

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=<%= @c['num.recovery.threads.per.data.dir'] %>

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
<%- if not @c['log.flush.interval.messages'].nil? then -%>
log.flush.interval.messages=<%= @c['log.flush.interval.messages'] %>
<%- else -%>
#log.flush.interval.messages=10000
<%- end -%>

# The maximum amount of time a message can sit in a log before we force a flush
<%- if not @c['log.flush.interval.ms'].nil? then -%>
log.flush.interval.ms=<%= @c['log.flush.interval.ms'] %>
<%- else -%>
#log.flush.interval.ms=1000
<%- end -%>

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours=<%= @c['log.retention.hours'] %>

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
<%- if not @c['log.retention.bytes'].nil? then -%>
log.retention.bytes=<%= @c['log.retention.bytes'] %>
<%- else -%>
#log.retention.bytes=1073741824
<%- end -%>

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=<%= @c['log.segment.bytes'] %>

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=<%= @c['log.retention.check.interval.ms'] %>

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable=<%= @c['log.cleaner.enable'] %>

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=<%= @c['zookeeper.connect'].join(',') %>/<%= @c['zookeeper.prefix'] %>

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=<%= @c['zookeeper.connection.timeout.ms'] %>
